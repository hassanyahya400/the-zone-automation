{
	"info": {
		"_postman_id": "a79dab99-93ea-40dd-95d6-2666bb89ee17",
		"name": "activities-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "19922862-a79dab99-93ea-40dd-95d6-2666bb89ee17"
	},
	"item": [
		{
			"name": "scenarios",
			"item": [
				{
					"name": "create an activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5991274f-9848-4fed-bdd8-e80cd40f6491",
								"exec": [
									"// Define the JSON schema for the response body",
									"const activitySchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"title\": { \"type\": \"string\" },",
									"        \"dueDate\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"        \"completed\": { \"type\": \"boolean\" }",
									"    },",
									"    \"required\": [\"id\", \"title\", \"dueDate\", \"completed\"]",
									"};",
									"",
									"// 5. Validate the response body against the schema",
									"pm.test(\"Response body matches the expected schema\", function () {",
									"   pm.response.to.have.jsonSchema(activitySchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9eec6a33-4836-4f29-b07e-a125e3cf745c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductAdjective}}\",\n  \"dueDate\": \"{{$isoTimestamp}}\",\n  \"completed\": {{$randomBoolean}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{version}}/activities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"activities"
							]
						},
						"description": "This request shows an example of generating mock user data in the request body. You can use this to populate some users for testing your API or application, or to ensure that your API accepts a range of inputs within certain parameters."
					},
					"response": []
				},
				{
					"name": "get all activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "313a688b-5fed-40de-a228-710d5c31a946",
								"exec": [
									"// Define the expected schema for the array items",
									"const activitySchema = {",
									"    type: \"object\",",
									"    properties: {",
									"        id: { type: \"number\" },",
									"        title: { type: \"string\" },",
									"        dueDate: { type: \"string\", format: \"date-time\" },",
									"        completed: { type: \"boolean\" }",
									"    },",
									"    required: [\"id\", \"title\", \"dueDate\", \"completed\"]",
									"};",
									"",
									"// Define the expected schema for the array",
									"const responseSchema = {",
									"    type: \"array\",",
									"    items: activitySchema",
									"};",
									"",
									"// Get the response JSON",
									"const response = pm.response.json();",
									"",
									"// Validate the response schema",
									"pm.test(\"Response matches the schema\", function () {",
									"    pm.expect(response).to.be.jsonSchema(responseSchema);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1fee5f55-06c8-44d3-8d49-1e3a9d459360",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "text/plain; v=1.0"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/activities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"activities"
							]
						},
						"description": "This request shows an example of generating mock purchase details in the request body. It demonstrates a few finance-related dynamic variables, in addition to the ones for random ID, Integer, Boolean, and Timestamp."
					},
					"response": []
				},
				{
					"name": "get one activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f90fff60-e9f3-4ee1-bd43-41b87de2bd49",
								"exec": [
									"// Define the JSON schema for the response body",
									"const activitySchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"integer\" },",
									"        \"title\": { \"type\": \"string\" },",
									"        \"dueDate\": { \"type\": \"string\", \"format\": \"date-time\" },",
									"        \"completed\": { \"type\": \"boolean\" }",
									"    },",
									"    \"required\": [\"id\", \"title\", \"dueDate\", \"completed\"]",
									"};",
									"",
									"// 5. Validate the response body against the schema",
									"pm.test(\"Response body matches the expected schema\", function () {",
									"   pm.response.to.have.jsonSchema(activitySchema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5aa499a5-7378-4931-8d40-2312a543c4aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "text/plain; v=1.0"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/activities/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"activities",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						},
						"description": "This request shows an example of generating mock purchase details in the request body. It demonstrates a few finance-related dynamic variables, in addition to the ones for random ID, Integer, Boolean, and Timestamp."
					},
					"response": []
				}
			],
			"id": "c35235ef-3718-4ace-93b8-623045fad90d",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "338b9499-f83c-41a0-9126-1dd749a0a1b9",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "31bd5d36-bb85-4e67-9cb8-d0daa9a82a51",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Assert that the response status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Assert that the response time is less than 5 seconds (5000 milliseconds)",
							"pm.test(\"Response time is less than 5 seconds\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Assert that the Content-Type is application/json",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "negative-testing",
			"item": [
				{
					"name": "create an activity with no payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5991274f-9848-4fed-bdd8-e80cd40f6491",
								"exec": [
									"// Test to check if the response status code is 415",
									"pm.test(\"Response status code should be 415 Unsupported Media Type\", function () {",
									"    pm.response.to.have.status(415);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "47f24eba-74a3-4aae-90ea-74d7ae1db0e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{version}}/activities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"activities"
							]
						},
						"description": "This request shows an example of generating mock user data in the request body. You can use this to populate some users for testing your API or application, or to ensure that your API accepts a range of inputs within certain parameters."
					},
					"response": []
				},
				{
					"name": "create an activity with invalid date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5991274f-9848-4fed-bdd8-e80cd40f6491",
								"exec": [
									"// Test to check if the response status code is 415",
									"pm.test(\"Response status code should be 400 Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "181caa32-ae64-4714-884d-c23f248714ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomProductAdjective}}\",\n  \"dueDate\": \"invalid date\",\n  \"completed\": {{$randomBoolean}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{version}}/activities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"activities"
							]
						},
						"description": "This request shows an example of generating mock user data in the request body. You can use this to populate some users for testing your API or application, or to ensure that your API accepts a range of inputs within certain parameters."
					},
					"response": []
				},
				{
					"name": "get activity with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f90fff60-e9f3-4ee1-bd43-41b87de2bd49",
								"exec": [
									"// Test to check if the response status code is 415",
									"pm.test(\"Response status code should be 400 Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b9af14b6-4cd0-4f60-977a-3d62c5c45bba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "text/plain; v=1.0"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/activities/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"activities",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "ppp"
								}
							]
						},
						"description": "This request shows an example of generating mock purchase details in the request body. It demonstrates a few finance-related dynamic variables, in addition to the ones for random ID, Integer, Boolean, and Timestamp."
					},
					"response": []
				}
			],
			"id": "66b11110-c732-4bde-bee1-44e1624a8df8"
		},
		{
			"name": "security",
			"item": [
				{
					"name": "sql injection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "313a688b-5fed-40de-a228-710d5c31a946",
								"exec": [
									"pm.test(\"Response status code should not be 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "06e4c441-5f09-42e2-b9bd-40847ec010fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "text/plain; v=1.0"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/activities?title='OR TRUNCATE TABLE users; --",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"activities"
							],
							"query": [
								{
									"key": "title",
									"value": "'OR TRUNCATE TABLE users; --"
								}
							]
						},
						"description": "This request shows an example of generating mock purchase details in the request body. It demonstrates a few finance-related dynamic variables, in addition to the ones for random ID, Integer, Boolean, and Timestamp."
					},
					"response": []
				}
			],
			"id": "7b69a12e-0573-45be-93c2-58e65cdfac60"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b9823798-a532-4a6d-9763-43d64641c97e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1cdac34c-4137-4871-a90e-0903f83e028f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ac882964-1e94-4108-842b-027bb352d9a8",
			"key": "baseUrl",
			"value": "https://fakerestapi.azurewebsites.net/api",
			"type": "string"
		},
		{
			"id": "07094b24-bb49-4cfd-9ad1-fb2cabd35504",
			"key": "version",
			"value": "v1",
			"type": "string"
		}
	]
}